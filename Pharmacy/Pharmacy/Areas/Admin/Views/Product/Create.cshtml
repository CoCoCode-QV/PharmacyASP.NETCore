@model Product; 

@{
    ViewData["Title"] = "Create";
    Layout = "~/Areas/Admin/Views/_Layout_Admin.cshtml";

    var yesNoList = new List<SelectListItem>
    {
       new SelectListItem { Text = "Có", Value = "true" },
       new SelectListItem { Text = "Không", Value = "false" }
    };

}

<h2>Thêm mới sản phẩm</h2>

<hr />
<div class="edit-admin">
    @using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductName, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.EditorFor(model =>model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model =>model.ProductName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductPrice, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.EditorFor(model =>model.ProductPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model =>model.ProductPrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductImage, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    <input type="file" name="photo" />
                    @Html.ValidationMessageFor(model =>model.ProductImage, "", new { @class = "text-danger" })
                </div>
            </div>
         @*    <div class="form-group row">
                @Html.LabelFor(model =>model.ProductInventory, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.EditorFor(model =>model.ProductInventory, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model =>model.ProductInventory, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductExpiryDate, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.EditorFor(model =>model.ProductExpiryDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model =>model.ProductExpiryDate, "", new { @class = "text-danger" })
                </div>
            </div> *@
            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductDetail, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-8">
                    <textarea id="summernote" asp-for="ProductDetail" name="ProductDetail"></textarea>
                    @Html.ValidationMessageFor(model =>model.ProductDetail, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductIngredients, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.EditorFor(model =>model.ProductIngredients, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model =>model.ProductIngredients    , "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductPrescription, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">

                    @Html.DropDownListFor(model => model.ProductPrescription,   yesNoList   , new { @class = "form-control" })
                    @Html.ValidationMessageFor(model =>model.ProductPrescription, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CategoryId,  ViewBag.Category as SelectList, "-- Chọn danh mục --", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>
          @*   <div class="form-group row">
                @Html.LabelFor(model =>model.DiscountId, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.DiscountId,  ViewBag.Discount as SelectList, "-- Chọn mã giảm giá --", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model =>model.DiscountId, "", new { @class = "text-danger" })
                </div>
            </div> *@
            <div class="form-group row">
                @Html.LabelFor(model =>model.ProductActive, htmlAttributes: new { @class = "col-form-label col-sm-2" })
                <div class="col-sm-10">

                    @Html.DropDownListFor(model => model.ProductActive,   yesNoList   , new { @class = "form-control" })
                    @Html.ValidationMessageFor(model =>model.ProductActive, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-10">
                    <p class="text-danger ">
                        @TempData["error"]
                    </p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-lg-2">
                    <input type="submit" value="Thêm mới" class="btn btn-success" />
                </div>
            </div>
        </div>
    }
</div>

<div class="back-pro">
    <i class="fa fa-reply"></i>
    @Html.ActionLink("Quay lại", "Index")
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-bs4.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-bs4.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#summernote').summernote({
                placeholder: 'Chi tiết sản phẩm...',
                tabsize: 2,
                height: 500,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'underline', 'clear']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video']],
                    ['view', ['fullscreen', 'codeview', 'help']]
                ],
                callbacks: {
                    onImageUpload: function (files) {
                        for (let i = 0; i < files.length; i++) {
                            UploadImage(files[i]);
                        }
                    }
                }
            });

            function UploadImage(file) {
                var url = "@Url.Action("UploadImage", "Product")";

                var formData = new FormData();
                formData.append("file", file);

                $.ajax({
                    type: "POST",
                    url: url,
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (fileUrl) {
                     
                        var imgNode = document.createElement("img");
                        imgNode.src = fileUrl.url;
                        $("#summernote").summernote("insertNode", imgNode);
                    },
                    error: function (data) {
                        alert(data.responseText);
                    }
                });
            }
        });
    </script>
}